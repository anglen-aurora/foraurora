<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>cn.foraurora</groupId>
    <artifactId>forauora</artifactId>
    <packaging>pom</packaging>
    <version>1.0.0</version>
    <modules>
        <module>foraurora-common</module>
        <module>foraurora-log-product</module>
        <module>foraurora-provider</module>
        <module>foraurora-second-provider</module>
        <module>foraurora-redis-demo</module>
        <module>liteflow-demo</module>
        <module>foraurora-es-service</module>
        <module>kafka-demo</module>
        <module>foraurora-log-handler</module>
        <module>foraurora-hello</module>
    </modules>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>2.5.8</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>2020.0.5</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>cn.hutool</groupId>
                <artifactId>hutool-bom</artifactId>
                <version>5.8.4</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>

            <dependency>
                <groupId>com.alibaba.boot</groupId>
                <artifactId>dubbo-spring-boot-starter</artifactId>
                <version>0.2.0</version>
            </dependency>
            <dependency>
                <groupId>org.apache.curator</groupId>
                <artifactId>curator-client</artifactId>
                <version>5.2.1</version>
            </dependency>
            <dependency>
                <groupId>org.apache.zookeeper</groupId>
                <artifactId>zookeeper</artifactId>
                <version>3.8.0</version>
            </dependency>


            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>1.18.20</version>
            </dependency>

            <dependency>
                <groupId>org.redisson</groupId>
                <artifactId>redisson-spring-boot-starter</artifactId>
                <version>3.19.1</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <excludes>
                    <exclude>application*.yml</exclude>
                </excludes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>application.yml</include>
                    <include>application-${active.profile}.yml</include>
                </includes>
            </resource>
        </resources>

        <plugins>
<!--            <plugin>-->
<!--                <groupId>com.github.shalousun</groupId>-->
<!--                <artifactId>smart-doc-maven-plugin</artifactId>-->
<!--                <version>2.6.2</version>-->
<!--                <configuration>-->
<!--                    &lt;!&ndash;指定生成文档的使用的配置文件,配置文件放在自己的项目中&ndash;&gt;-->
<!--                    <configFile>./src/main/resources/smart-doc.json</configFile>-->
<!--                    &lt;!&ndash;指定项目名称，推荐使用动态参数，例如${project.description}&ndash;&gt;-->
<!--                    &lt;!&ndash;如果smart-doc.json中和此处都未设置projectName，2.3.4开始，插件自动采用pom中的projectName作为设置&ndash;&gt;-->
<!--                    <projectName>${project.description}</projectName>-->
<!--                    &lt;!&ndash;smart-doc实现自动分析依赖树加载第三方依赖的源码，如果一些框架依赖库加载不到导致报错，这时请使用excludes排除掉&ndash;&gt;-->
<!--                    <excludes>-->
<!--                        &lt;!&ndash;格式为：groupId:artifactId;参考如下&ndash;&gt;-->
<!--                        &lt;!&ndash;也可以支持正则式如：com.alibaba:.* &ndash;&gt;-->
<!--&lt;!&ndash;                        <exclude>com.alibaba:fastjson</exclude>&ndash;&gt;-->
<!--                    </excludes>-->
<!--                    &lt;!&ndash;includes配置用于配置加载外部依赖源码,配置后插件会按照配置项加载外部源代码而不是自动加载所有，因此使用时需要注意&ndash;&gt;-->
<!--                    &lt;!&ndash;smart-doc能自动分析依赖树加载所有依赖源码，原则上会影响文档构建效率，因此你可以使用includes来让插件加载你配置的组件&ndash;&gt;-->
<!--                    <includes>-->
<!--                        &lt;!&ndash;格式为：groupId:artifactId;参考如下&ndash;&gt;-->
<!--                        &lt;!&ndash;也可以支持正则式如：com.alibaba:.* &ndash;&gt;-->
<!--&lt;!&ndash;                        <include>com.alibaba:fastjson</include>&ndash;&gt;-->
<!--                        &lt;!&ndash; 如果配置了includes的情况下， 使用了mybatis-plus的分页需要include所使用的源码包 &ndash;&gt;-->
<!--&lt;!&ndash;                        <include>com.baomidou:mybatis-plus-extension</include>&ndash;&gt;-->
<!--                        &lt;!&ndash; 如果配置了includes的情况下， 使用了jpa的分页需要include所使用的源码包 &ndash;&gt;-->
<!--&lt;!&ndash;                        <include>org.springframework.data:spring-data-commons</include>&ndash;&gt;-->
<!--                    </includes>-->
<!--                </configuration>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        &lt;!&ndash;如果不需要在执行编译时启动smart-doc，则将phase注释掉&ndash;&gt;-->
<!--                        <phase>compile</phase>-->
<!--                        <goals>-->
<!--                            &lt;!&ndash;smart-doc提供了html、openapi、markdown等goal，可按需配置&ndash;&gt;-->
<!--                            <goal>html</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>dev</id>
            <properties>
                <active.profile>dev</active.profile>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>prod</id>
            <properties>
                <active.profile>prod</active.profile>
            </properties>
        </profile>
    </profiles>
</project>